import os

class Provider:
    def __init__(self, name, base_url=None, api_key=None, models=None):
        self.name = name
        self.base_url = base_url
        self.api_key = api_key if api_key else os.environ.get(f"{name.upper()}_API_KEY")
        self.models = models or []

PROVIDERS_CONFIG = {
    "Cerebras": Provider("Cerebras", "https://api.cerebras.ai/v1"),
    "Groq": Provider("Groq", "https://api.groq.com/openai/v1"),
    "Gemini": Provider("Gemini", "https://generativelanguage.googleapis.com/v1beta/openai/"),
    "SambaNova": Provider("SambaNova", "https://api.sambanova.ai/v1"),
    "Zhipu": Provider("Zhipu", "https://open.bigmodel.cn/api/paas/v4/"),
    "GLHF": Provider("GLHF", "https://glhf.chat/api/openai/v1"),
    "SiliconFlow": Provider("SiliconFlow", "https://api.siliconflow.cn/v1"),
    "LMstudio": Provider("LMstudio", "http://localhost:1234/v1", "not-needed"),
    "Kobold": Provider("Kobold", "http://localhost:5001/v1", "not-needed"),
    "Ollama": Provider("Ollama", "http://localhost:11434/v1", "ollama")
}

PROVIDERS = ["All"] + list(PROVIDERS_CONFIG.keys())
DEFAULT_PROVIDER = "All"

# Available models list / 可用模型列表
AVAILABLE_MODELS = [
    "[Cerebras] llama3.3-70b",
    "[Cerebras] llama3.1-70b",
    "[Cerebras] llama3.1-8b",
    "[Groq] mixtral-8x7b-32768",
    "[Groq] llama-3.1-70b-versatile",
    "[Groq] llama-3.1-8b-instant",
    "[Groq] llama-3.2-90b-vision-preview",
    "[Groq] llama-3.3-70b-versatile",
    "[Groq] llama-3.3-70b-specdec",
    "[Gemini] gemini-1.5-flash-002",
    "[Gemini] gemini-1.5-flash-8b",
    "[Gemini] gemini-exp-1206",
    "[Gemini] gemini-2.0-flash-exp",
    "[SambaNova] Meta-Llama-3.1-8B-Instruct",
    "[SambaNova] Meta-Llama-3.1-70B-Instruct",
    "[SambaNova] Meta-Llama-3.1-405B-Instruct",
    "[SambaNova] Qwen2.5-72B-Instruct",
    "[SambaNova] Qwen2.5-Coder-32B-Instruct",
    "[SambaNova] Meta-Llama-3.3-70B-Instruct",
    "[SambaNova] QwQ-32B-Preview",
    "[Zhipu] glm-4-flash",
    "[GLHF] hf:meta-llama/Llama-3.3-70B-Instruct",
    "[GLHF] hf:Qwen/Qwen2.5-Coder-32B-Instruct",
    "[SiliconFlow] Qwen/Qwen2.5-7B-Instruct"
]

def get_provider_info(model_name):
    """Get provider information from model name"""
    if not model_name.startswith("["):
        return None
    provider_name = model_name[1:model_name.index("]")]
    return PROVIDERS_CONFIG.get(provider_name)

def get_api_models(provider):
    """Generic function to fetch models from API endpoints"""
    try:
        import requests
        response = requests.get(f"{provider.base_url}/models", timeout=1)
        models_data = response.json()
        return [f"[{provider.name}] {model['id']}" for model in models_data['data']]
    except:
        return []

def filter_models_by_provider(provider):
    """Filter models list by provider"""
    if provider == "All":
        return AVAILABLE_MODELS
    return [m for m in AVAILABLE_MODELS if m.startswith(f"[{provider}]")]

def refresh_available_models(include_local=False):
    """Refresh available models list"""
    global AVAILABLE_MODELS
    base_models = [m for m in AVAILABLE_MODELS if not m.startswith(("[LMstudio]", "[Kobold]", "[Ollama]"))]
    
    if include_local:
        local_providers = ["LMstudio", "Kobold", "Ollama"]
        local_models = []
        for provider_name in local_providers:
            provider = PROVIDERS_CONFIG[provider_name]
            local_models.extend(get_api_models(provider))
        AVAILABLE_MODELS = base_models + local_models
    else:
        AVAILABLE_MODELS = base_models

# Default folder path (placeholder) / 默认文件夹路径 (使用占位符)
DEFAULT_FOLDER_PATH = os.path.dirname(__file__)

DEFAULT_MODEL = AVAILABLE_MODELS[0]

DEFAULT_TEMPERATURE = "1.0"

DEFAULT_THEME = "light"

# Theme colors
THEMES = {
    "light": {
        "window_bg": "#F5F5F5",   
        "text": "#000000",
        "input_bg": "#FFFFFF",
        "input_border": "#CCCCCC",
        "button_bg": "#0078D7",
        "button_hover": "#005A9E",
        "button_text": "#FFFFFF",
        "title_button_hover": "#E81123",
        "sidebar_bg": "#EBEBEB",
        "dialog_bg": "#F5F5F5",
        "dropdown_text": "#000000"
    },
    "dark": {
        "window_bg": "#2D2D2D",   
        "text": "#FFFFFF",
        "input_bg": "#3D3D3D",
        "input_border": "#555555",
        "button_bg": "#0078D7",
        "button_hover": "#005A9E",
        "button_text": "#FFFFFF",
        "title_button_hover": "#E81123",
        "sidebar_bg": "#252525",
        "dialog_bg": "#2D2D2D",
        "dropdown_text": "#FFFFFF"
    }
}

USE_PREDEFINED_PREFIX = True
USE_TRANSCRIPT_TEXT = True